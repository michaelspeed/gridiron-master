# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Administrator {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  emailAddress: String!
  type: AdministratorEnum!
  user: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum AdministratorEnum {
  SUPERADMIN
  STAFF
}

type Asset {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  type: String!
  mimeType: String!
  width: Float!
  height: Float!
  fileSize: Float!
  source: String!
  preview: String!
  focalPoint: JSONObject!
  featureds(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductFilter = {}

    """Specify to sort results."""
    sorting: [ProductSort!] = []
  ): ProductConnection!
  productAssets(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductAssetFilter = {}

    """Specify to sort results."""
    sorting: [ProductAssetSort!] = []
  ): ProductAssetConnection!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input ProductFilter {
  and: [ProductFilter!]
  or: [ProductFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  productName: StringFieldComparison
  slug: StringFieldComparison
  description: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input ProductSort {
  field: ProductSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProductSortFields {
  id
  createdAt
  updatedAt
  productName
  slug
  description
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input ProductAssetFilter {
  and: [ProductAssetFilter!]
  or: [ProductAssetFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input ProductAssetSort {
  field: ProductAssetSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProductAssetSortFields {
  id
  createdAt
  updatedAt
}

type Channel {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: String!
  token: String!
  defaultLanguageCode: String!
  currencyCode: String!
  pricesIncludeTax: Boolean!
}

type Collection {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isRoot: Boolean!
  inMenu: Boolean!
  position: Float!
  isPrivate: Boolean!
  name: String!
  description: String!
  children(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: CollectionFilter = {}

    """Specify to sort results."""
    sorting: [CollectionSort!] = []
  ): CollectionConnection!
  products(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductFilter = {}

    """Specify to sort results."""
    sorting: [ProductSort!] = []
  ): ProductConnection!
  agreements(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: BillingAgreementFilter = {}

    """Specify to sort results."""
    sorting: [BillingAgreementSort!] = []
  ): BillingAgreementConnection!
  parent: Collection
  seo: Seo!
}

input CollectionFilter {
  and: [CollectionFilter!]
  or: [CollectionFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  isRoot: BooleanFieldComparison
  inMenu: BooleanFieldComparison
  position: NumberFieldComparison
  isPrivate: BooleanFieldComparison
  name: StringFieldComparison
  description: StringFieldComparison
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
}

input CollectionSort {
  field: CollectionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CollectionSortFields {
  id
  createdAt
  updatedAt
  isRoot
  inMenu
  position
  isPrivate
  name
  description
}

input BillingAgreementFilter {
  and: [BillingAgreementFilter!]
  or: [BillingAgreementFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  value: NumberFieldComparison
}

input BillingAgreementSort {
  field: BillingAgreementSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum BillingAgreementSortFields {
  id
  createdAt
  updatedAt
  value
}

type Facet {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  isPrivate: Boolean!
  code: String!
  products(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductFilter = {}

    """Specify to sort results."""
    sorting: [ProductSort!] = []
  ): ProductConnection!
  values(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: FacetValueFilter = {}

    """Specify to sort results."""
    sorting: [FacetValueSort!] = []
  ): FacetValueConnection!
}

input FacetValueFilter {
  and: [FacetValueFilter!]
  or: [FacetValueFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  code: StringFieldComparison
}

input FacetValueSort {
  field: FacetValueSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum FacetValueSortFields {
  id
  createdAt
  updatedAt
  code
}

type FacetValue {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: String!
  products(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductFilter = {}

    """Specify to sort results."""
    sorting: [ProductSort!] = []
  ): ProductConnection!
  facet: Facet!
}

type Order {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  orderPlacedAt: DateTime!
  totalPrice: Float!
  address: String!
  item: OrderLine!
}

type OrderLine {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Product {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  productName: String!
  slug: String!
  description: String!
  options(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductOptionGroupFilter = {}

    """Specify to sort results."""
    sorting: [ProductOptionGroupSort!] = []
  ): ProductOptionGroupConnection!
  facets(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: FacetValueFilter = {}

    """Specify to sort results."""
    sorting: [FacetValueSort!] = []
  ): FacetValueConnection!
  variants(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductVariantFilter = {}

    """Specify to sort results."""
    sorting: [ProductVariantSort!] = []
  ): ProductVariantConnection!
  assets(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductAssetFilter = {}

    """Specify to sort results."""
    sorting: [ProductAssetSort!] = []
  ): ProductAssetConnection!
  collection: Collection
  featuredAsset: Asset!
}

input ProductOptionGroupFilter {
  and: [ProductOptionGroupFilter!]
  or: [ProductOptionGroupFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  name: StringFieldComparison
  code: StringFieldComparison
}

input ProductOptionGroupSort {
  field: ProductOptionGroupSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProductOptionGroupSortFields {
  id
  createdAt
  updatedAt
  name
  code
}

input ProductVariantFilter {
  and: [ProductVariantFilter!]
  or: [ProductVariantFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  dum_price: NumberFieldComparison
  enabled: BooleanFieldComparison
  sku: StringFieldComparison
  name: StringFieldComparison
  trackInventory: BooleanFieldComparison
}

input ProductVariantSort {
  field: ProductVariantSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProductVariantSortFields {
  id
  createdAt
  updatedAt
  deletedAt
  dum_price
  enabled
  sku
  name
  trackInventory
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  verified: Boolean!
  verificationToken: String!
  passwordResetToken: String!
  identifierChangeToken: String!
  pendingIdentifier: String
  lastLogin: String
  firstName: String
  lastName: String
  phoneNumber: String!
  address: String
  administrator: Administrator!
  vendor: Vendor!
}

type Vendor {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  vendorName: String!
  phoneNumber: String!
  email: String!
  store: Store!
  license: VendorLicense!
  user: User!
}

type TaxCategory {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  rates(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: TaxRateFilter = {}

    """Specify to sort results."""
    sorting: [TaxRateSort!] = []
  ): TaxRateConnection!
}

input TaxRateFilter {
  and: [TaxRateFilter!]
  or: [TaxRateFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  name: StringFieldComparison
  value: NumberFieldComparison
  enabled: BooleanFieldComparison
}

input TaxRateSort {
  field: TaxRateSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum TaxRateSortFields {
  id
  createdAt
  updatedAt
  name
  value
  enabled
}

type TaxRate {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  value: Float!
  enabled: Boolean!
  variants(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductVariantPriceFilter = {}

    """Specify to sort results."""
    sorting: [ProductVariantPriceSort!] = []
  ): ProductVariantPriceConnection!
  zone: Zone!
  category: TaxCategory!
}

input ProductVariantPriceFilter {
  and: [ProductVariantPriceFilter!]
  or: [ProductVariantPriceFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  price: NumberFieldComparison
  taxIncluded: BooleanFieldComparison
}

input ProductVariantPriceSort {
  field: ProductVariantPriceSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProductVariantPriceSortFields {
  id
  createdAt
  updatedAt
  price
  taxIncluded
}

type Zone {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  members(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: CountryFilter = {}

    """Specify to sort results."""
    sorting: [CountrySort!] = []
  ): CountryConnection!
  stores(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: StoreFilter = {}

    """Specify to sort results."""
    sorting: [StoreSort!] = []
  ): StoreConnection!
  taxrates(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: TaxRateFilter = {}

    """Specify to sort results."""
    sorting: [TaxRateSort!] = []
  ): TaxRateConnection!
}

input CountryFilter {
  and: [CountryFilter!]
  or: [CountryFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  code: StringFieldComparison
  name: StringFieldComparison
  enabled: BooleanFieldComparison
}

input CountrySort {
  field: CountrySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CountrySortFields {
  id
  createdAt
  updatedAt
  code
  name
  enabled
}

input StoreFilter {
  and: [StoreFilter!]
  or: [StoreFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  storeName: StringFieldComparison
  phoneNumber: StringFieldComparison
  officialemail: StringFieldComparison
  zipcode: StringFieldComparison
  streetAddress1: StringFieldComparison
  streetAddress2: StringFieldComparison
  GSTIN: StringFieldComparison
  singleStore: BooleanFieldComparison
  rentalStore: BooleanFieldComparison
  channelMarkets: BooleanFieldComparison
}

input StoreSort {
  field: StoreSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum StoreSortFields {
  id
  createdAt
  updatedAt
  storeName
  phoneNumber
  officialemail
  zipcode
  streetAddress1
  streetAddress2
  GSTIN
  singleStore
  rentalStore
  channelMarkets
}

type Store {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  storeName: String!
  phoneNumber: String!
  officialemail: String!
  zipcode: String!
  streetAddress1: String!
  streetAddress2: String!
  GSTIN: String!
  singleStore: Boolean!
  rentalStore: Boolean!
  channelMarkets: Boolean!
  type: StoreTypeEnum!
  skus(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: StockKeepingFilter = {}

    """Specify to sort results."""
    sorting: [StockKeepingSort!] = []
  ): StockKeepingConnection!
  country: Country!
  region: Zone!
}

enum StoreTypeEnum {
  DEFAULT
  VENDOR
}

input StockKeepingFilter {
  and: [StockKeepingFilter!]
  or: [StockKeepingFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  quantity: NumberFieldComparison
  available_quantity: NumberFieldComparison
  threshold: NumberFieldComparison
  multiple: BooleanFieldComparison
  backorder: BooleanFieldComparison
  stockstatus: BooleanFieldComparison
  sku: StringFieldComparison
  type: StringFieldComparison
}

input StockKeepingSort {
  field: StockKeepingSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum StockKeepingSortFields {
  id
  createdAt
  updatedAt
  quantity
  available_quantity
  threshold
  multiple
  backorder
  stockstatus
  sku
  type
}

type Role {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: String!
  description: String!
  permissions: [Permission!]!
  type: RoleType!
}

enum Permission {
  CreateOrder
  ReadOrder
  UpdateOrder
  DeleteOrder
  CreateInvoices
  ReadInvoices
  UpdateInvoices
  DeleteInvoices
  CreateCatalog
  ReadCatalog
  UpdateCatalog
  DeleteCatalog
  CreateCustomer
  ReadCustomer
  UpdateCustomer
  DeleteCustomer
  CreateAdministrator
  ReadAdministrator
  UpdateAdministrator
  DeleteAdministrator
  CreatePromotion
  ReadPromotion
  UpdatePromotion
  DeletePromotion
  CreateSettings
  ReadSettings
  UpdateSettings
  DeleteSettings
  CreateCommunications
  ReadCommunications
  UpdateCommunications
  DeleteCommunications
  CreateSeo
  ReadSeo
  UpdateSeo
  DeleteSeo
}

enum RoleType {
  ADMINISTRATOR
  VENDOR
  USER
  BASIC
}

type Seo {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  urlKey: String!
  metatitle: String!
  metakeywords: [String!]
  metadesc: String!
  collection: Collection
  variant: ProductVariant
}

type ProductAsset {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  asset: Asset!
  product: Product!
}

type StockKeeping {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  quantity: Float!
  available_quantity: Float!
  threshold: Float!
  multiple: Boolean!
  backorder: Boolean!
  stockstatus: Boolean!
  sku: String!
  type: String!
  sales(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: SaleFilter = {}

    """Specify to sort results."""
    sorting: [SaleSort!] = []
  ): SaleConnection!
  cancels(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: CancellationFilter = {}

    """Specify to sort results."""
    sorting: [CancellationSort!] = []
  ): CancellationConnection!
  movements(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: StockMovementFilter = {}

    """Specify to sort results."""
    sorting: [StockMovementSort!] = []
  ): StockMovementConnection!
  store: Store!
  variant: ProductVariant!
}

input SaleFilter {
  and: [SaleFilter!]
  or: [SaleFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  quantity: NumberFieldComparison
}

input SaleSort {
  field: SaleSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SaleSortFields {
  id
  createdAt
  updatedAt
  quantity
}

input CancellationFilter {
  and: [CancellationFilter!]
  or: [CancellationFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  quantity: NumberFieldComparison
}

input CancellationSort {
  field: CancellationSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CancellationSortFields {
  id
  createdAt
  updatedAt
  quantity
}

input StockMovementFilter {
  and: [StockMovementFilter!]
  or: [StockMovementFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  quantity: NumberFieldComparison
}

input StockMovementSort {
  field: StockMovementSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum StockMovementSortFields {
  id
  createdAt
  updatedAt
  quantity
}

type ProductVariant {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  dum_price: Float!
  enabled: Boolean!
  sku: String!
  name: String!
  trackInventory: Boolean!
  stocks(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: StockKeepingFilter = {}

    """Specify to sort results."""
    sorting: [StockKeepingSort!] = []
  ): StockKeepingConnection!
  seo: Seo
  specs: ProductVariantSpecs
  price: ProductVariantPrice
  asset: ProductVariantAsset
  product: Product!
}

type ProductVariantAsset {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  asset: Asset!
  variant: ProductVariant!
}

type ProductVariantPrice {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  price: Float!
  taxIncluded: Boolean!
  tax: TaxRate!
  variant: ProductVariant!
}

type ProductOption {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  code: String!
  variants(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductVariantFilter = {}

    """Specify to sort results."""
    sorting: [ProductVariantSort!] = []
  ): ProductVariantConnection!
  group: ProductOptionGroup!
}

type ProductOptionGroup {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  code: String!
  options(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductOptionFilter = {}

    """Specify to sort results."""
    sorting: [ProductOptionSort!] = []
  ): ProductOptionConnection!
  product: Product!
}

input ProductOptionFilter {
  and: [ProductOptionFilter!]
  or: [ProductOptionFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  name: StringFieldComparison
  code: StringFieldComparison
}

input ProductOptionSort {
  field: ProductOptionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProductOptionSortFields {
  id
  createdAt
  updatedAt
  name
  code
}

type VendorPlans {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isActive: Boolean!
  name: String!
  planValue: Float!
  priceStrategy: String!
  tenureStrategy: VendorPlanTenure!
  licences(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: VendorLicenseFilter = {}

    """Specify to sort results."""
    sorting: [VendorLicenseSort!] = []
  ): VendorLicenseConnection!
}

enum VendorPlanTenure {
  MONTHLY
  HALFYEARLY
  ANNUAL
}

input VendorLicenseFilter {
  and: [VendorLicenseFilter!]
  or: [VendorLicenseFilter!]
  id: IDFilterComparison
  tenureStart: DateFieldComparison
  tenureEnd: DateFieldComparison
}

input VendorLicenseSort {
  field: VendorLicenseSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum VendorLicenseSortFields {
  id
  tenureStart
  tenureEnd
}

type VendorLicense {
  id: ID!
  tenureStart: DateTime!
  tenureEnd: DateTime!
  vendor: Vendor!
}

type BillingAgreement {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  value: Float!
  type: BillingAgreementEnum!
  state: BillingAgreementState!
  collection: Collection
  store: Store!
  request: [BillingAgreementRequest!]!
}

enum BillingAgreementEnum {
  PLANBASE
  COLLECTIONBASE
  COMISSIONBASE
}

enum BillingAgreementState {
  APPROVED
  PENDING
  REJECTED
}

type ProductVariantSpecs {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  specs: JSON!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type BillingAgreementRequest {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  value: Float!
  state: BillingAgreementState!
}

type Cancellation {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  quantity: Float!
  keeping: StockKeeping!
}

type StockMovement {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  quantity: Float!
  keeping: StockKeeping!
}

type Sale {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  quantity: Float!
  keeping: StockKeeping!
}

type Zip {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  code: Float!
}

type Menu {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  targetId: String!
  target: String!
  children(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: MenuFilter = {}

    """Specify to sort results."""
    sorting: [MenuSort!] = []
  ): MenuConnection!
  parent: Menu
}

input MenuFilter {
  and: [MenuFilter!]
  or: [MenuFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  title: StringFieldComparison
  targetId: StringFieldComparison
  target: StringFieldComparison
}

input MenuSort {
  field: MenuSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum MenuSortFields {
  id
  createdAt
  updatedAt
  title
  targetId
  target
}

type Country {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: String!
  name: String!
  enabled: Boolean!
  zones(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ZoneFilter = {}

    """Specify to sort results."""
    sorting: [ZoneSort!] = []
  ): ZoneConnection!
}

input ZoneFilter {
  and: [ZoneFilter!]
  or: [ZoneFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  name: StringFieldComparison
}

input ZoneSort {
  field: ZoneSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ZoneSortFields {
  id
  createdAt
  updatedAt
  name
}

type AdministratorDto {
  user: User!
  token: String!
  store: Store
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type AssetEdge {
  """The node containing the Asset"""
  node: Asset!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type AssetConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [AssetEdge!]!
}

type ProductEdge {
  """The node containing the Product"""
  node: Product!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ProductConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ProductEdge!]!
}

type ProductAssetEdge {
  """The node containing the ProductAsset"""
  node: ProductAsset!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ProductAssetConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ProductAssetEdge!]!
}

type RoleEdge {
  """The node containing the Role"""
  node: Role!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type RoleConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [RoleEdge!]!
}

type CollectionDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  isRoot: Boolean
  inMenu: Boolean
  position: Float
  isPrivate: Boolean
  name: String
  description: String
}

type CollectionEdge {
  """The node containing the Collection"""
  node: Collection!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type CollectionConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [CollectionEdge!]!
}

type BillingAgreementEdge {
  """The node containing the BillingAgreement"""
  node: BillingAgreement!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type BillingAgreementConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [BillingAgreementEdge!]!
}

type ChannelDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
  token: String
  defaultLanguageCode: String
  currencyCode: String
  pricesIncludeTax: Boolean
}

type ChannelEdge {
  """The node containing the Channel"""
  node: Channel!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ChannelConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ChannelEdge!]!
}

type StoreDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  storeName: String
  phoneNumber: String
  officialemail: String
  zipcode: String
  streetAddress1: String
  streetAddress2: String
  GSTIN: String
  singleStore: Boolean
  rentalStore: Boolean
  channelMarkets: Boolean
  type: StoreTypeEnum
}

type StoreEdge {
  """The node containing the Store"""
  node: Store!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type StoreConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [StoreEdge!]!
}

type StockKeepingEdge {
  """The node containing the StockKeeping"""
  node: StockKeeping!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type StockKeepingConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [StockKeepingEdge!]!
}

type TaxCategoryDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

type TaxCategoryEdge {
  """The node containing the TaxCategory"""
  node: TaxCategory!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type TaxCategoryConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [TaxCategoryEdge!]!
}

type TaxRateEdge {
  """The node containing the TaxRate"""
  node: TaxRate!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type TaxRateConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [TaxRateEdge!]!
}

type TaxRateDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  value: Float
  enabled: Boolean
}

type ProductVariantPriceEdge {
  """The node containing the ProductVariantPrice"""
  node: ProductVariantPrice!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ProductVariantPriceConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ProductVariantPriceEdge!]!
}

type VendorDto {
  user: User!
  token: String!
  vendor: Vendor!
}

type VendorEdge {
  """The node containing the Vendor"""
  node: Vendor!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type VendorConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [VendorEdge!]!
}

type ZoneDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

type ZoneEdge {
  """The node containing the Zone"""
  node: Zone!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ZoneConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ZoneEdge!]!
}

type CountryEdge {
  """The node containing the Country"""
  node: Country!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type CountryConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [CountryEdge!]!
}

type CountryDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
  name: String
  enabled: Boolean
}

type SeoDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  urlKey: String
  metatitle: String
  metakeywords: [String!]
  metadesc: String
}

type SeoEdge {
  """The node containing the Seo"""
  node: Seo!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type SeoConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [SeoEdge!]!
}

type FacetDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  isPrivate: Boolean
  code: String
}

type FacetEdge {
  """The node containing the Facet"""
  node: Facet!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type FacetConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [FacetEdge!]!
}

type FacetValueEdge {
  """The node containing the FacetValue"""
  node: FacetValue!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type FacetValueConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [FacetValueEdge!]!
}

type FacetValueDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
}

type ProductDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  productName: String
  slug: String
  description: String
}

type ProductOptionGroupEdge {
  """The node containing the ProductOptionGroup"""
  node: ProductOptionGroup!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ProductOptionGroupConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ProductOptionGroupEdge!]!
}

type ProductVariantEdge {
  """The node containing the ProductVariant"""
  node: ProductVariant!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ProductVariantConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ProductVariantEdge!]!
}

type ProductVariantDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  dum_price: Float
  enabled: Boolean
  sku: String
  name: String
  trackInventory: Boolean
}

type ProductOptionDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  code: String
}

type ProductOptionEdge {
  """The node containing the ProductOption"""
  node: ProductOption!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ProductOptionConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ProductOptionEdge!]!
}

type ProductOptionGroupDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  code: String
}

type ProductVariantPriceDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  price: Float
  taxIncluded: Boolean
}

type ProductVariantAssetEdge {
  """The node containing the ProductVariantAsset"""
  node: ProductVariantAsset!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ProductVariantAssetConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ProductVariantAssetEdge!]!
}

type ProductAssetDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
}

type VendorPlansEdge {
  """The node containing the VendorPlans"""
  node: VendorPlans!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type VendorPlansConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [VendorPlansEdge!]!
}

type VendorLicenseEdge {
  """The node containing the VendorLicense"""
  node: VendorLicense!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type VendorLicenseConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [VendorLicenseEdge!]!
}

type StockKeepingDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
  available_quantity: Float
  threshold: Float
  multiple: Boolean
  backorder: Boolean
  stockstatus: Boolean
  sku: String
  type: String
}

type SaleEdge {
  """The node containing the Sale"""
  node: Sale!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type SaleConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [SaleEdge!]!
}

type CancellationEdge {
  """The node containing the Cancellation"""
  node: Cancellation!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type CancellationConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [CancellationEdge!]!
}

type StockMovementEdge {
  """The node containing the StockMovement"""
  node: StockMovement!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type StockMovementConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [StockMovementEdge!]!
}

type SaleDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

type StockMovementDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

type CancellationDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

type OrderDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  orderPlacedAt: DateTime
  totalPrice: Float
  address: String
}

type OrderEdge {
  """The node containing the Order"""
  node: Order!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type OrderConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [OrderEdge!]!
}

type ZipDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  slug: String
  code: Float
}

type ZipEdge {
  """The node containing the Zip"""
  node: Zip!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ZipConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ZipEdge!]!
}

type MenuResponseTypes {
  menu: String!
}

type MenuDeleteResponse {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  targetId: String
  target: String
}

type MenuEdge {
  """The node containing the Menu"""
  node: Menu!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type MenuConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [MenuEdge!]!
}

type Query {
  GetAdministratorData: Administrator!
  GetAllAdministrator(search: String): [Administrator!]!
  asset(id: ID!): Asset
  assets(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: AssetFilter = {}

    """Specify to sort results."""
    sorting: [AssetSort!] = []
  ): AssetConnection!
  role(id: ID!): Role
  roles(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: RoleFilter = {}

    """Specify to sort results."""
    sorting: [RoleSort!] = []
  ): RoleConnection!
  collection(id: ID!): Collection
  collections(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: CollectionFilter = {}

    """Specify to sort results."""
    sorting: [CollectionSort!] = []
  ): CollectionConnection!
  GetCollectionTree: [Collection!]!
  channel(id: ID!): Channel
  channels(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ChannelFilter = {}

    """Specify to sort results."""
    sorting: [ChannelSort!] = []
  ): ChannelConnection!
  store(id: ID!): Store
  stores(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: StoreFilter = {}

    """Specify to sort results."""
    sorting: [StoreSort!] = []
  ): StoreConnection!
  GetDefaultStore: Store!
  taxCategory(id: ID!): TaxCategory
  taxCategories(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: TaxCategoryFilter = {}

    """Specify to sort results."""
    sorting: [TaxCategorySort!] = []
  ): TaxCategoryConnection!
  taxRate(id: ID!): TaxRate
  taxRates(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: TaxRateFilter = {}

    """Specify to sort results."""
    sorting: [TaxRateSort!] = []
  ): TaxRateConnection!
  GetAllTaxRates: [TaxRate!]!
  GetAllTaxCategory: [TaxCategory!]!
  GetCurrentUser: User!
  vendor(id: ID!): Vendor
  vendors(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: VendorFilter = {}

    """Specify to sort results."""
    sorting: [VendorSort!] = []
  ): VendorConnection!
  GetVendorInfo: Vendor
  zone(id: ID!): Zone
  zones(
    """Limit or page results."""
    paging: CursorPaging = {first: 20}

    """Specify to filter the records returned."""
    filter: ZoneFilter = {}

    """Specify to sort results."""
    sorting: [ZoneSort!] = []
  ): ZoneConnection!
  ZoneFindMany: [Zone!]!
  ZoneFindOne(id: ID!): Zone!
  country(id: ID!): Country
  countries(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: CountryFilter = {}

    """Specify to sort results."""
    sorting: [CountrySort!] = []
  ): CountryConnection!
  GetAllCountries: [Country!]!
  seo(id: ID!): Seo
  seos(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: SeoFilter = {}

    """Specify to sort results."""
    sorting: [SeoSort!] = []
  ): SeoConnection!
  facet(id: ID!): Facet
  facets(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: FacetFilter = {}

    """Specify to sort results."""
    sorting: [FacetSort!] = []
  ): FacetConnection!
  facetValue(id: ID!): FacetValue
  facetValues(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: FacetValueFilter = {}

    """Specify to sort results."""
    sorting: [FacetValueSort!] = []
  ): FacetValueConnection!
  product(id: ID!): Product
  products(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductFilter = {}

    """Specify to sort results."""
    sorting: [ProductSort!] = []
  ): ProductConnection!
  productVariant(id: ID!): ProductVariant
  productVariants(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductVariantFilter = {}

    """Specify to sort results."""
    sorting: [ProductVariantSort!] = []
  ): ProductVariantConnection!
  productOption(id: ID!): ProductOption
  productOptions(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductOptionFilter = {}

    """Specify to sort results."""
    sorting: [ProductOptionSort!] = []
  ): ProductOptionConnection!
  productOptionGroup(id: ID!): ProductOptionGroup
  productOptionGroups(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductOptionGroupFilter = {}

    """Specify to sort results."""
    sorting: [ProductOptionGroupSort!] = []
  ): ProductOptionGroupConnection!
  productVariantPrice(id: ID!): ProductVariantPrice
  productVariantPrices(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductVariantPriceFilter = {}

    """Specify to sort results."""
    sorting: [ProductVariantPriceSort!] = []
  ): ProductVariantPriceConnection!
  productVariantAsset(id: ID!): ProductVariantAsset
  productVariantAssets(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductVariantAssetFilter = {}

    """Specify to sort results."""
    sorting: [ProductVariantAssetSort!] = []
  ): ProductVariantAssetConnection!
  productAsset(id: ID!): ProductAsset
  productAssets(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductAssetFilter = {}

    """Specify to sort results."""
    sorting: [ProductAssetSort!] = []
  ): ProductAssetConnection!
  vendorPlans(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: VendorPlansFilter = {}

    """Specify to sort results."""
    sorting: [VendorPlansSort!] = []
  ): VendorPlansConnection!
  FindAllVendorPlans: [VendorPlans!]!
  GetVendorPlansForRegistration: [VendorPlans!]!
  vendorLicense(id: ID!): VendorLicense
  vendorLicenses(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: VendorLicenseFilter = {}

    """Specify to sort results."""
    sorting: [VendorLicenseSort!] = []
  ): VendorLicenseConnection!
  GetBillingAgreementByVendor: [BillingAgreement!]!
  GetBillingAgreement(id: ID!): BillingAgreement!
  GetBillingRequestForAgreement(id: String!): [BillingAgreementRequest!]!
  stockKeeping(id: ID!): StockKeeping
  stockKeepings(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: StockKeepingFilter = {}

    """Specify to sort results."""
    sorting: [StockKeepingSort!] = []
  ): StockKeepingConnection!
  getStockKeepingVendor(vendorId: ID, variantId: ID!): StockKeeping
  getStockKeepingByStore: [StockKeeping!]!
  sale(id: ID!): Sale
  sales(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: SaleFilter = {}

    """Specify to sort results."""
    sorting: [SaleSort!] = []
  ): SaleConnection!
  stockMovement(id: ID!): StockMovement
  stockMovements(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: StockMovementFilter = {}

    """Specify to sort results."""
    sorting: [StockMovementSort!] = []
  ): StockMovementConnection!
  cancellation(id: ID!): Cancellation
  cancellations(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: CancellationFilter = {}

    """Specify to sort results."""
    sorting: [CancellationSort!] = []
  ): CancellationConnection!
  order(id: ID!): Order
  orders(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: OrderFilter = {}

    """Specify to sort results."""
    sorting: [OrderSort!] = []
  ): OrderConnection!
  zip(id: ID!): Zip
  zips(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ZipFilter = {}

    """Specify to sort results."""
    sorting: [ZipSort!] = []
  ): ZipConnection!
  findAllZip: [Zip!]!
  menu(id: ID!): Menu
  menus(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: MenuFilter = {}

    """Specify to sort results."""
    sorting: [MenuSort!] = []
  ): MenuConnection!
  GetMenuTree: MenuResponseTypes!
}

input AssetFilter {
  and: [AssetFilter!]
  or: [AssetFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  name: StringFieldComparison
  type: StringFieldComparison
  mimeType: StringFieldComparison
  width: NumberFieldComparison
  height: NumberFieldComparison
  fileSize: NumberFieldComparison
  source: StringFieldComparison
  preview: StringFieldComparison
}

input AssetSort {
  field: AssetSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum AssetSortFields {
  id
  createdAt
  updatedAt
  name
  type
  mimeType
  width
  height
  fileSize
  source
  preview
}

input RoleFilter {
  and: [RoleFilter!]
  or: [RoleFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  code: StringFieldComparison
  description: StringFieldComparison
}

input RoleSort {
  field: RoleSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum RoleSortFields {
  id
  createdAt
  updatedAt
  code
  description
}

input ChannelFilter {
  and: [ChannelFilter!]
  or: [ChannelFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  code: StringFieldComparison
  token: StringFieldComparison
  defaultLanguageCode: StringFieldComparison
  currencyCode: StringFieldComparison
  pricesIncludeTax: BooleanFieldComparison
}

input ChannelSort {
  field: ChannelSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ChannelSortFields {
  id
  createdAt
  updatedAt
  code
  token
  defaultLanguageCode
  currencyCode
  pricesIncludeTax
}

input TaxCategoryFilter {
  and: [TaxCategoryFilter!]
  or: [TaxCategoryFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  name: StringFieldComparison
}

input TaxCategorySort {
  field: TaxCategorySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum TaxCategorySortFields {
  id
  createdAt
  updatedAt
  name
}

input VendorFilter {
  and: [VendorFilter!]
  or: [VendorFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  vendorName: StringFieldComparison
  phoneNumber: StringFieldComparison
  email: StringFieldComparison
}

input VendorSort {
  field: VendorSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum VendorSortFields {
  id
  createdAt
  updatedAt
  vendorName
  phoneNumber
  email
}

input SeoFilter {
  and: [SeoFilter!]
  or: [SeoFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  urlKey: StringFieldComparison
  metatitle: StringFieldComparison
}

input SeoSort {
  field: SeoSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SeoSortFields {
  id
  createdAt
  updatedAt
  deletedAt
  urlKey
  metatitle
}

input FacetFilter {
  and: [FacetFilter!]
  or: [FacetFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  name: StringFieldComparison
  isPrivate: BooleanFieldComparison
  code: StringFieldComparison
}

input FacetSort {
  field: FacetSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum FacetSortFields {
  id
  createdAt
  updatedAt
  name
  isPrivate
  code
}

input ProductVariantAssetFilter {
  and: [ProductVariantAssetFilter!]
  or: [ProductVariantAssetFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input ProductVariantAssetSort {
  field: ProductVariantAssetSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProductVariantAssetSortFields {
  id
  createdAt
  updatedAt
}

input VendorPlansFilter {
  and: [VendorPlansFilter!]
  or: [VendorPlansFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  planValue: NumberFieldComparison
}

input VendorPlansSort {
  field: VendorPlansSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum VendorPlansSortFields {
  id
  createdAt
  updatedAt
  isActive
  name
  planValue
}

input OrderFilter {
  and: [OrderFilter!]
  or: [OrderFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  orderPlacedAt: DateFieldComparison
  totalPrice: NumberFieldComparison
  address: StringFieldComparison
}

input OrderSort {
  field: OrderSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrderSortFields {
  id
  createdAt
  updatedAt
  orderPlacedAt
  totalPrice
  address
}

input ZipFilter {
  and: [ZipFilter!]
  or: [ZipFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  name: StringFieldComparison
  slug: StringFieldComparison
  code: NumberFieldComparison
}

input ZipSort {
  field: ZipSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ZipSortFields {
  id
  createdAt
  updatedAt
  name
  slug
  code
}

type Mutation {
  administratorLogin(password: String!, email: String!): AdministratorDto!
  createAdministrator(type: AdministratorEnum!, phone: String!, email: String!, lname: String!, fname: String!): Administrator!
  updateAdministratorPassword(newpassword: String!, password: String!, email: String!): User!
  removeFeaturedsFromAsset(input: RelationsInput!): Asset!
  removeProductAssetsFromAsset(input: RelationsInput!): Asset!
  addFeaturedsToAsset(input: RelationsInput!): Asset!
  addProductAssetsToAsset(input: RelationsInput!): Asset!
  createAsset(file: Upload!): Asset!
  createRole(roles: [Permission!]!, description: String!, code: String!): Role!
  updateRole(roles: [Permission!]!, description: String!, id: ID!): Role!
  deleteOneCollection(input: DeleteOneInput!): CollectionDeleteResponse!
  deleteManyCollections(input: DeleteManyCollectionsInput!): DeleteManyResponse!
  updateOneCollection(input: UpdateOneCollectionInput!): Collection!
  updateManyCollections(input: UpdateManyCollectionsInput!): UpdateManyResponse!
  createOneCollection(input: CreateOneCollectionInput!): Collection!
  createManyCollections(input: CreateManyCollectionsInput!): [Collection!]!
  removeChildrenFromCollection(input: RelationsInput!): Collection!
  removeProductsFromCollection(input: RelationsInput!): Collection!
  removeAgreementsFromCollection(input: RelationsInput!): Collection!
  removeParentFromCollection(input: RelationInput!): Collection!
  removeSeoFromCollection(input: RelationInput!): Collection!
  addChildrenToCollection(input: RelationsInput!): Collection!
  addProductsToCollection(input: RelationsInput!): Collection!
  addAgreementsToCollection(input: RelationsInput!): Collection!
  setParentOnCollection(input: RelationInput!): Collection!
  setSeoOnCollection(input: RelationInput!): Collection!
  AddParentToChildCollection(childId: String!, parentId: String!): Collection!
  deleteOneChannel(input: DeleteOneInput!): ChannelDeleteResponse!
  deleteManyChannels(input: DeleteManyChannelsInput!): DeleteManyResponse!
  updateOneChannel(input: UpdateOneChannelInput!): Channel!
  updateManyChannels(input: UpdateManyChannelsInput!): UpdateManyResponse!
  createOneChannel(input: CreateOneChannelInput!): Channel!
  createManyChannels(input: CreateManyChannelsInput!): [Channel!]!
  deleteOneStore(input: DeleteOneInput!): StoreDeleteResponse!
  deleteManyStores(input: DeleteManyStoresInput!): DeleteManyResponse!
  updateOneStore(input: UpdateOneStoreInput!): Store!
  updateManyStores(input: UpdateManyStoresInput!): UpdateManyResponse!
  createOneStore(input: CreateOneStoreInput!): Store!
  createManyStores(input: CreateManyStoresInput!): [Store!]!
  removeSkusFromStore(input: RelationsInput!): Store!
  removeRegionFromStore(input: RelationInput!): Store!
  addSkusToStore(input: RelationsInput!): Store!
  setCountryOnStore(input: RelationInput!): Store!
  setRegionOnStore(input: RelationInput!): Store!
  CreateDefaultStore(countryId: String!, zipcode: String!, streetAddress2: String!, streetAddress1: String!, GSTIN: String!, officialemail: String!, phoneNumber: String!, storeName: String!): Store!
  deleteOneTaxCategory(input: DeleteOneInput!): TaxCategoryDeleteResponse!
  deleteManyTaxCategories(input: DeleteManyTaxCategoriesInput!): DeleteManyResponse!
  updateOneTaxCategory(input: UpdateOneTaxCategoryInput!): TaxCategory!
  updateManyTaxCategories(input: UpdateManyTaxCategoriesInput!): UpdateManyResponse!
  createOneTaxCategory(input: CreateOneTaxCategoryInput!): TaxCategory!
  createManyTaxCategories(input: CreateManyTaxCategoriesInput!): [TaxCategory!]!
  removeRatesFromTaxCategory(input: RelationsInput!): TaxCategory!
  addRatesToTaxCategory(input: RelationsInput!): TaxCategory!
  deleteOneTaxRate(input: DeleteOneInput!): TaxRateDeleteResponse!
  deleteManyTaxRates(input: DeleteManyTaxRatesInput!): DeleteManyResponse!
  updateOneTaxRate(input: UpdateOneTaxRateInput!): TaxRate!
  updateManyTaxRates(input: UpdateManyTaxRatesInput!): UpdateManyResponse!
  createOneTaxRate(input: CreateOneTaxRateInput!): TaxRate!
  createManyTaxRates(input: CreateManyTaxRatesInput!): [TaxRate!]!
  removeVariantsFromTaxRate(input: RelationsInput!): TaxRate!
  removeZoneFromTaxRate(input: RelationInput!): TaxRate!
  removeCategoryFromTaxRate(input: RelationInput!): TaxRate!
  addVariantsToTaxRate(input: RelationsInput!): TaxRate!
  setZoneOnTaxRate(input: RelationInput!): TaxRate!
  setCategoryOnTaxRate(input: RelationInput!): TaxRate!
  removeStoreFromVendor(input: RelationInput!): Vendor!
  removeLicenseFromVendor(input: RelationInput!): Vendor!
  removeUserFromVendor(input: RelationInput!): Vendor!
  setStoreOnVendor(input: RelationInput!): Vendor!
  setLicenseOnVendor(input: RelationInput!): Vendor!
  setUserOnVendor(input: RelationInput!): Vendor!
  LoginVendor(password: String!, email: String!): VendorDto!
  RegisterVendor(rentals: Boolean!, streetAddress2: String!, streetAddress1: String!, zipcode: String!, region: ID!, officialEmail: String!, storeNumber: String!, storeName: String!, password: String!, phone: String!, lastname: String!, firstname: String!, planID: String!, email: String!): VendorDto!
  deleteOneZone(input: DeleteOneInput!): ZoneDeleteResponse!
  deleteManyZones(input: DeleteManyZonesInput!): DeleteManyResponse!
  updateOneZone(input: UpdateOneZoneInput!): Zone!
  updateManyZones(input: UpdateManyZonesInput!): UpdateManyResponse!
  createOneZone(input: CreateOneZoneInput!): Zone!
  createManyZones(input: CreateManyZonesInput!): [Zone!]!
  removeMembersFromZone(input: RelationsInput!): Zone!
  removeStoresFromZone(input: RelationsInput!): Zone!
  removeTaxratesFromZone(input: RelationsInput!): Zone!
  addMembersToZone(input: RelationsInput!): Zone!
  addStoresToZone(input: RelationsInput!): Zone!
  addTaxratesToZone(input: RelationsInput!): Zone!
  AddCountryToZone(countryId: ID!, id: ID!): Zone!
  deleteOneCountry(input: DeleteOneInput!): CountryDeleteResponse!
  deleteManyCountries(input: DeleteManyCountriesInput!): DeleteManyResponse!
  updateOneCountry(input: UpdateOneCountryInput!): Country!
  updateManyCountries(input: UpdateManyCountriesInput!): UpdateManyResponse!
  createOneCountry(input: CreateOneCountryInput!): Country!
  createManyCountries(input: CreateManyCountriesInput!): [Country!]!
  removeZonesFromCountry(input: RelationsInput!): Country!
  addZonesToCountry(input: RelationsInput!): Country!
  deleteOneSeo(input: DeleteOneInput!): SeoDeleteResponse!
  deleteManySeos(input: DeleteManySeosInput!): DeleteManyResponse!
  updateOneSeo(input: UpdateOneSeoInput!): Seo!
  updateManySeos(input: UpdateManySeosInput!): UpdateManyResponse!
  createOneSeo(input: CreateOneSeoInput!): Seo!
  createManySeos(input: CreateManySeosInput!): [Seo!]!
  removeCollectionFromSeo(input: RelationInput!): Seo!
  removeVariantFromSeo(input: RelationInput!): Seo!
  setCollectionOnSeo(input: RelationInput!): Seo!
  setVariantOnSeo(input: RelationInput!): Seo!
  createProductSeo(metadesc: String!, metakeywords: [String!]!, metatitle: String!, urlKey: String!, variantId: ID!): Seo!
  updateProductSeo(metadesc: String!, metakeywords: [String!]!, metatitle: String!, urlKey: String!, seoId: ID!): Seo!
  deleteOneFacet(input: DeleteOneInput!): FacetDeleteResponse!
  deleteManyFacets(input: DeleteManyFacetsInput!): DeleteManyResponse!
  updateOneFacet(input: UpdateOneFacetInput!): Facet!
  updateManyFacets(input: UpdateManyFacetsInput!): UpdateManyResponse!
  createOneFacet(input: CreateOneFacetInput!): Facet!
  createManyFacets(input: CreateManyFacetsInput!): [Facet!]!
  removeProductsFromFacet(input: RelationsInput!): Facet!
  removeValuesFromFacet(input: RelationsInput!): Facet!
  addProductsToFacet(input: RelationsInput!): Facet!
  addValuesToFacet(input: RelationsInput!): Facet!
  deleteOneFacetValue(input: DeleteOneInput!): FacetValueDeleteResponse!
  deleteManyFacetValues(input: DeleteManyFacetValuesInput!): DeleteManyResponse!
  updateOneFacetValue(input: UpdateOneFacetValueInput!): FacetValue!
  updateManyFacetValues(input: UpdateManyFacetValuesInput!): UpdateManyResponse!
  createOneFacetValue(input: CreateOneFacetValueInput!): FacetValue!
  createManyFacetValues(input: CreateManyFacetValuesInput!): [FacetValue!]!
  removeProductsFromFacetValue(input: RelationsInput!): FacetValue!
  removeFacetFromFacetValue(input: RelationInput!): FacetValue!
  addProductsToFacetValue(input: RelationsInput!): FacetValue!
  setFacetOnFacetValue(input: RelationInput!): FacetValue!
  deleteOneProduct(input: DeleteOneInput!): ProductDeleteResponse!
  deleteManyProducts(input: DeleteManyProductsInput!): DeleteManyResponse!
  updateOneProduct(input: UpdateOneProductInput!): Product!
  updateManyProducts(input: UpdateManyProductsInput!): UpdateManyResponse!
  createOneProduct(input: CreateOneProductInput!): Product!
  createManyProducts(input: CreateManyProductsInput!): [Product!]!
  removeOptionsFromProduct(input: RelationsInput!): Product!
  removeFacetsFromProduct(input: RelationsInput!): Product!
  removeVariantsFromProduct(input: RelationsInput!): Product!
  removeAssetsFromProduct(input: RelationsInput!): Product!
  removeCollectionFromProduct(input: RelationInput!): Product!
  removeFeaturedAssetFromProduct(input: RelationInput!): Product!
  addOptionsToProduct(input: RelationsInput!): Product!
  addFacetsToProduct(input: RelationsInput!): Product!
  addVariantsToProduct(input: RelationsInput!): Product!
  addAssetsToProduct(input: RelationsInput!): Product!
  setCollectionOnProduct(input: RelationInput!): Product!
  setFeaturedAssetOnProduct(input: RelationInput!): Product!
  CreateProduct(facet: [String!]!, asset: [String!]!, featured: String!, slug: String!, desc: String!, name: String!): Product!
  UpdateProductCollection(collectionId: ID!, id: ID!): Product!
  updateProduct(facet: [String!]!, asset: [String!]!, featured: String!, id: ID!, desc: String!, name: String!): Product!
  deleteOneProductVariant(input: DeleteOneInput!): ProductVariantDeleteResponse!
  deleteManyProductVariants(input: DeleteManyProductVariantsInput!): DeleteManyResponse!
  updateOneProductVariant(input: UpdateOneProductVariantInput!): ProductVariant!
  updateManyProductVariants(input: UpdateManyProductVariantsInput!): UpdateManyResponse!
  createOneProductVariant(input: CreateOneProductVariantInput!): ProductVariant!
  createManyProductVariants(input: CreateManyProductVariantsInput!): [ProductVariant!]!
  removeStocksFromProductVariant(input: RelationsInput!): ProductVariant!
  removeSeoFromProductVariant(input: RelationInput!): ProductVariant!
  removeSpecsFromProductVariant(input: RelationInput!): ProductVariant!
  removePriceFromProductVariant(input: RelationInput!): ProductVariant!
  removeAssetFromProductVariant(input: RelationInput!): ProductVariant!
  removeProductFromProductVariant(input: RelationInput!): ProductVariant!
  addStocksToProductVariant(input: RelationsInput!): ProductVariant!
  setSeoOnProductVariant(input: RelationInput!): ProductVariant!
  setSpecsOnProductVariant(input: RelationInput!): ProductVariant!
  setPriceOnProductVariant(input: RelationInput!): ProductVariant!
  setAssetOnProductVariant(input: RelationInput!): ProductVariant!
  setProductOnProductVariant(input: RelationInput!): ProductVariant!
  CreateProductVariants(options: String!, prodId: ID!): [ProductVariant!]!
  CreateProductVariantSpecification(specs: JSON!, variantId: ID!): ProductVariantSpecs!
  UpdateProductVariantSpecification(specs: JSON!, id: ID!): ProductVariantSpecs!
  deleteOneProductOption(input: DeleteOneInput!): ProductOptionDeleteResponse!
  deleteManyProductOptions(input: DeleteManyProductOptionsInput!): DeleteManyResponse!
  updateOneProductOption(input: UpdateOneProductOptionInput!): ProductOption!
  updateManyProductOptions(input: UpdateManyProductOptionsInput!): UpdateManyResponse!
  createOneProductOption(input: CreateOneProductOptionInput!): ProductOption!
  createManyProductOptions(input: CreateManyProductOptionsInput!): [ProductOption!]!
  removeVariantsFromProductOption(input: RelationsInput!): ProductOption!
  removeGroupFromProductOption(input: RelationInput!): ProductOption!
  addVariantsToProductOption(input: RelationsInput!): ProductOption!
  setGroupOnProductOption(input: RelationInput!): ProductOption!
  deleteOneProductOptionGroup(input: DeleteOneInput!): ProductOptionGroupDeleteResponse!
  deleteManyProductOptionGroups(input: DeleteManyProductOptionGroupsInput!): DeleteManyResponse!
  updateOneProductOptionGroup(input: UpdateOneProductOptionGroupInput!): ProductOptionGroup!
  updateManyProductOptionGroups(input: UpdateManyProductOptionGroupsInput!): UpdateManyResponse!
  createOneProductOptionGroup(input: CreateOneProductOptionGroupInput!): ProductOptionGroup!
  createManyProductOptionGroups(input: CreateManyProductOptionGroupsInput!): [ProductOptionGroup!]!
  removeOptionsFromProductOptionGroup(input: RelationsInput!): ProductOptionGroup!
  removeProductFromProductOptionGroup(input: RelationInput!): ProductOptionGroup!
  addOptionsToProductOptionGroup(input: RelationsInput!): ProductOptionGroup!
  setProductOnProductOptionGroup(input: RelationInput!): ProductOptionGroup!
  deleteOneProductVariantPrice(input: DeleteOneInput!): ProductVariantPriceDeleteResponse!
  deleteManyProductVariantPrices(input: DeleteManyProductVariantPricesInput!): DeleteManyResponse!
  updateOneProductVariantPrice(input: UpdateOneProductVariantPriceInput!): ProductVariantPrice!
  updateManyProductVariantPrices(input: UpdateManyProductVariantPricesInput!): UpdateManyResponse!
  createOneProductVariantPrice(input: CreateOneProductVariantPriceInput!): ProductVariantPrice!
  createManyProductVariantPrices(input: CreateManyProductVariantPricesInput!): [ProductVariantPrice!]!
  removeTaxFromProductVariantPrice(input: RelationInput!): ProductVariantPrice!
  removeVariantFromProductVariantPrice(input: RelationInput!): ProductVariantPrice!
  setTaxOnProductVariantPrice(input: RelationInput!): ProductVariantPrice!
  setVariantOnProductVariantPrice(input: RelationInput!): ProductVariantPrice!
  CreateVariantPrice(taxIncluded: Boolean!, taxId: ID!, price: Float!, variantId: ID!): ProductVariantPrice!
  UpdateVariantPrice(taxIncluded: Boolean!, taxId: ID!, price: Float!, variantPriceId: ID!): ProductVariantPrice!
  removeAssetFromProductVariantAsset(input: RelationInput!): ProductVariantAsset!
  removeVariantFromProductVariantAsset(input: RelationInput!): ProductVariantAsset!
  setAssetOnProductVariantAsset(input: RelationInput!): ProductVariantAsset!
  setVariantOnProductVariantAsset(input: RelationInput!): ProductVariantAsset!
  CreateProductVariantAsset(assetId: ID!, id: ID!): ProductVariantAsset!
  deleteOneProductAsset(input: DeleteOneInput!): ProductAssetDeleteResponse!
  deleteManyProductAssets(input: DeleteManyProductAssetsInput!): DeleteManyResponse!
  updateOneProductAsset(input: UpdateOneProductAssetInput!): ProductAsset!
  updateManyProductAssets(input: UpdateManyProductAssetsInput!): UpdateManyResponse!
  createOneProductAsset(input: CreateOneProductAssetInput!): ProductAsset!
  createManyProductAssets(input: CreateManyProductAssetsInput!): [ProductAsset!]!
  removeAssetFromProductAsset(input: RelationInput!): ProductAsset!
  removeProductFromProductAsset(input: RelationInput!): ProductAsset!
  setAssetOnProductAsset(input: RelationInput!): ProductAsset!
  setProductOnProductAsset(input: RelationInput!): ProductAsset!
  removeLicencesFromVendorPlans(input: RelationsInput!): VendorPlans!
  addLicencesToVendorPlans(input: RelationsInput!): VendorPlans!
  CreatePlan(tenureStrategy: VendorPlanTenure!, priceStrategy: VendorPlanPrice!, value: Float!, name: String!): VendorPlans!
  UpdatePlan(status: Boolean!, id: ID!): VendorPlans!
  removeVendorFromVendorLicense(input: RelationInput!): VendorLicense!
  setVendorOnVendorLicense(input: RelationInput!): VendorLicense!
  CreateBillingRequest(value: String!, id: String!): BillingAgreementRequest!
  UpdateBillingRequest(value: String!, id: String!): BillingAgreementRequest!
  deleteOneStockKeeping(input: DeleteOneInput!): StockKeepingDeleteResponse!
  deleteManyStockKeepings(input: DeleteManyStockKeepingsInput!): DeleteManyResponse!
  updateOneStockKeeping(input: UpdateOneStockKeepingInput!): StockKeeping!
  updateManyStockKeepings(input: UpdateManyStockKeepingsInput!): UpdateManyResponse!
  removeSalesFromStockKeeping(input: RelationsInput!): StockKeeping!
  removeCancelsFromStockKeeping(input: RelationsInput!): StockKeeping!
  removeMovementsFromStockKeeping(input: RelationsInput!): StockKeeping!
  removeStoreFromStockKeeping(input: RelationInput!): StockKeeping!
  removeVariantFromStockKeeping(input: RelationInput!): StockKeeping!
  addSalesToStockKeeping(input: RelationsInput!): StockKeeping!
  addCancelsToStockKeeping(input: RelationsInput!): StockKeeping!
  addMovementsToStockKeeping(input: RelationsInput!): StockKeeping!
  setStoreOnStockKeeping(input: RelationInput!): StockKeeping!
  setVariantOnStockKeeping(input: RelationInput!): StockKeeping!
  createOrUpdateStock(type: StockKeepingType, stockId: ID, storeId: ID, variantId: ID, stockstatus: Boolean!, backorder: Boolean!, multiple: Boolean!, sku: String!, threshold: Float!, quantity: Float!): StockKeeping!
  deleteOneSale(input: DeleteOneInput!): SaleDeleteResponse!
  deleteManySales(input: DeleteManySalesInput!): DeleteManyResponse!
  updateOneSale(input: UpdateOneSaleInput!): Sale!
  updateManySales(input: UpdateManySalesInput!): UpdateManyResponse!
  createOneSale(input: CreateOneSaleInput!): Sale!
  createManySales(input: CreateManySalesInput!): [Sale!]!
  removeKeepingFromSale(input: RelationInput!): Sale!
  setKeepingOnSale(input: RelationInput!): Sale!
  deleteOneStockMovement(input: DeleteOneInput!): StockMovementDeleteResponse!
  deleteManyStockMovements(input: DeleteManyStockMovementsInput!): DeleteManyResponse!
  updateOneStockMovement(input: UpdateOneStockMovementInput!): StockMovement!
  updateManyStockMovements(input: UpdateManyStockMovementsInput!): UpdateManyResponse!
  createOneStockMovement(input: CreateOneStockMovementInput!): StockMovement!
  createManyStockMovements(input: CreateManyStockMovementsInput!): [StockMovement!]!
  removeKeepingFromStockMovement(input: RelationInput!): StockMovement!
  setKeepingOnStockMovement(input: RelationInput!): StockMovement!
  deleteOneCancellation(input: DeleteOneInput!): CancellationDeleteResponse!
  deleteManyCancellations(input: DeleteManyCancellationsInput!): DeleteManyResponse!
  updateOneCancellation(input: UpdateOneCancellationInput!): Cancellation!
  updateManyCancellations(input: UpdateManyCancellationsInput!): UpdateManyResponse!
  createOneCancellation(input: CreateOneCancellationInput!): Cancellation!
  createManyCancellations(input: CreateManyCancellationsInput!): [Cancellation!]!
  removeKeepingFromCancellation(input: RelationInput!): Cancellation!
  setKeepingOnCancellation(input: RelationInput!): Cancellation!
  deleteOneOrder(input: DeleteOneInput!): OrderDeleteResponse!
  deleteManyOrders(input: DeleteManyOrdersInput!): DeleteManyResponse!
  updateOneOrder(input: UpdateOneOrderInput!): Order!
  updateManyOrders(input: UpdateManyOrdersInput!): UpdateManyResponse!
  createOneOrder(input: CreateOneOrderInput!): Order!
  createManyOrders(input: CreateManyOrdersInput!): [Order!]!
  removeItemFromOrder(input: RelationInput!): Order!
  setItemOnOrder(input: RelationInput!): Order!
  deleteOneZip(input: DeleteOneInput!): ZipDeleteResponse!
  deleteManyZips(input: DeleteManyZipsInput!): DeleteManyResponse!
  updateOneZip(input: UpdateOneZipInput!): Zip!
  updateManyZips(input: UpdateManyZipsInput!): UpdateManyResponse!
  createOneZip(input: CreateOneZipInput!): Zip!
  createManyZips(input: CreateManyZipsInput!): [Zip!]!
  deleteOneMenu(input: DeleteOneInput!): MenuDeleteResponse!
  deleteManyMenus(input: DeleteManyMenusInput!): DeleteManyResponse!
  updateOneMenu(input: UpdateOneMenuInput!): Menu!
  updateManyMenus(input: UpdateManyMenusInput!): UpdateManyResponse!
  createOneMenu(input: CreateOneMenuInput!): Menu!
  createManyMenus(input: CreateManyMenusInput!): [Menu!]!
  removeChildrenFromMenu(input: RelationsInput!): Menu!
  removeParentFromMenu(input: RelationInput!): Menu!
  addChildrenToMenu(input: RelationsInput!): Menu!
  setParentOnMenu(input: RelationInput!): Menu!
  CreateMenuChildNode(target: String!, targetId: String!, title: String!, nodeId: ID!): Menu!
}

input RelationsInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input DeleteOneInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyCollectionsInput {
  """Filter to find records to delete"""
  filter: CollectionFilter!
}

input UpdateOneCollectionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCollection!
}

input UpdateCollection {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  isRoot: Boolean
  inMenu: Boolean
  position: Float
  isPrivate: Boolean
  name: String
  description: String
}

input UpdateManyCollectionsInput {
  """Filter used to find fields to update"""
  filter: CollectionFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCollection!
}

input CreateOneCollectionInput {
  """The record to create"""
  collection: CreateCollection!
}

input CreateCollection {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  isRoot: Boolean
  inMenu: Boolean
  position: Float
  isPrivate: Boolean
  name: String
  description: String
}

input CreateManyCollectionsInput {
  """Array of records to create"""
  collections: [CreateCollection!]!
}

input RelationInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input DeleteManyChannelsInput {
  """Filter to find records to delete"""
  filter: ChannelFilter!
}

input UpdateOneChannelInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateChannel!
}

input UpdateChannel {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
  token: String
  defaultLanguageCode: String
  currencyCode: String
  pricesIncludeTax: Boolean
}

input UpdateManyChannelsInput {
  """Filter used to find fields to update"""
  filter: ChannelFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateChannel!
}

input CreateOneChannelInput {
  """The record to create"""
  channel: CreateChannel!
}

input CreateChannel {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
  token: String
  defaultLanguageCode: String
  currencyCode: String
  pricesIncludeTax: Boolean
}

input CreateManyChannelsInput {
  """Array of records to create"""
  channels: [CreateChannel!]!
}

input DeleteManyStoresInput {
  """Filter to find records to delete"""
  filter: StoreFilter!
}

input UpdateOneStoreInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateStore!
}

input UpdateStore {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  storeName: String
  phoneNumber: String
  officialemail: String
  zipcode: String
  streetAddress1: String
  streetAddress2: String
  GSTIN: String
  singleStore: Boolean
  rentalStore: Boolean
  channelMarkets: Boolean
  type: StoreTypeEnum
}

input UpdateManyStoresInput {
  """Filter used to find fields to update"""
  filter: StoreFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateStore!
}

input CreateOneStoreInput {
  """The record to create"""
  store: CreateStore!
}

input CreateStore {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  storeName: String
  phoneNumber: String
  officialemail: String
  zipcode: String
  streetAddress1: String
  streetAddress2: String
  GSTIN: String
  singleStore: Boolean
  rentalStore: Boolean
  channelMarkets: Boolean
  type: StoreTypeEnum
}

input CreateManyStoresInput {
  """Array of records to create"""
  stores: [CreateStore!]!
}

input DeleteManyTaxCategoriesInput {
  """Filter to find records to delete"""
  filter: TaxCategoryFilter!
}

input UpdateOneTaxCategoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTaxCategory!
}

input UpdateTaxCategory {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

input UpdateManyTaxCategoriesInput {
  """Filter used to find fields to update"""
  filter: TaxCategoryFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTaxCategory!
}

input CreateOneTaxCategoryInput {
  """The record to create"""
  taxCategory: CreateTaxCategory!
}

input CreateTaxCategory {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

input CreateManyTaxCategoriesInput {
  """Array of records to create"""
  taxCategories: [CreateTaxCategory!]!
}

input DeleteManyTaxRatesInput {
  """Filter to find records to delete"""
  filter: TaxRateFilter!
}

input UpdateOneTaxRateInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTaxRate!
}

input UpdateTaxRate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  value: Float
  enabled: Boolean
}

input UpdateManyTaxRatesInput {
  """Filter used to find fields to update"""
  filter: TaxRateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTaxRate!
}

input CreateOneTaxRateInput {
  """The record to create"""
  taxRate: CreateTaxRate!
}

input CreateTaxRate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  value: Float
  enabled: Boolean
}

input CreateManyTaxRatesInput {
  """Array of records to create"""
  taxRates: [CreateTaxRate!]!
}

input DeleteManyZonesInput {
  """Filter to find records to delete"""
  filter: ZoneFilter!
}

input UpdateOneZoneInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateZone!
}

input UpdateZone {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

input UpdateManyZonesInput {
  """Filter used to find fields to update"""
  filter: ZoneFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateZone!
}

input CreateOneZoneInput {
  """The record to create"""
  zone: CreateZone!
}

input CreateZone {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

input CreateManyZonesInput {
  """Array of records to create"""
  zones: [CreateZone!]!
}

input DeleteManyCountriesInput {
  """Filter to find records to delete"""
  filter: CountryFilter!
}

input UpdateOneCountryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCountry!
}

input UpdateCountry {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
  name: String
  enabled: Boolean
}

input UpdateManyCountriesInput {
  """Filter used to find fields to update"""
  filter: CountryFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCountry!
}

input CreateOneCountryInput {
  """The record to create"""
  country: CreateCountry!
}

input CreateCountry {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
  name: String
  enabled: Boolean
}

input CreateManyCountriesInput {
  """Array of records to create"""
  countries: [CreateCountry!]!
}

input DeleteManySeosInput {
  """Filter to find records to delete"""
  filter: SeoFilter!
}

input UpdateOneSeoInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSeo!
}

input UpdateSeo {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  urlKey: String
  metatitle: String
  metakeywords: [String!]
  metadesc: String
}

input UpdateManySeosInput {
  """Filter used to find fields to update"""
  filter: SeoFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSeo!
}

input CreateOneSeoInput {
  """The record to create"""
  seo: CreateSeo!
}

input CreateSeo {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  urlKey: String
  metatitle: String
  metakeywords: [String!]
  metadesc: String
}

input CreateManySeosInput {
  """Array of records to create"""
  seos: [CreateSeo!]!
}

input DeleteManyFacetsInput {
  """Filter to find records to delete"""
  filter: FacetFilter!
}

input UpdateOneFacetInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFacet!
}

input UpdateFacet {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  isPrivate: Boolean
  code: String
}

input UpdateManyFacetsInput {
  """Filter used to find fields to update"""
  filter: FacetFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateFacet!
}

input CreateOneFacetInput {
  """The record to create"""
  facet: CreateFacet!
}

input CreateFacet {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  isPrivate: Boolean
  code: String
}

input CreateManyFacetsInput {
  """Array of records to create"""
  facets: [CreateFacet!]!
}

input DeleteManyFacetValuesInput {
  """Filter to find records to delete"""
  filter: FacetValueFilter!
}

input UpdateOneFacetValueInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFacetValue!
}

input UpdateFacetValue {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
}

input UpdateManyFacetValuesInput {
  """Filter used to find fields to update"""
  filter: FacetValueFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateFacetValue!
}

input CreateOneFacetValueInput {
  """The record to create"""
  facetValue: CreateFacetValue!
}

input CreateFacetValue {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
}

input CreateManyFacetValuesInput {
  """Array of records to create"""
  facetValues: [CreateFacetValue!]!
}

input DeleteManyProductsInput {
  """Filter to find records to delete"""
  filter: ProductFilter!
}

input UpdateOneProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProduct!
}

input UpdateProduct {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  productName: String
  slug: String
  description: String
}

input UpdateManyProductsInput {
  """Filter used to find fields to update"""
  filter: ProductFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProduct!
}

input CreateOneProductInput {
  """The record to create"""
  product: CreateProduct!
}

input CreateProduct {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  productName: String
  slug: String
  description: String
}

input CreateManyProductsInput {
  """Array of records to create"""
  products: [CreateProduct!]!
}

input DeleteManyProductVariantsInput {
  """Filter to find records to delete"""
  filter: ProductVariantFilter!
}

input UpdateOneProductVariantInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductVariant!
}

input UpdateProductVariant {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  dum_price: Float
  enabled: Boolean
  sku: String
  name: String
  trackInventory: Boolean
}

input UpdateManyProductVariantsInput {
  """Filter used to find fields to update"""
  filter: ProductVariantFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductVariant!
}

input CreateOneProductVariantInput {
  """The record to create"""
  productVariant: CreateProductVariant!
}

input CreateProductVariant {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  dum_price: Float
  enabled: Boolean
  sku: String
  name: String
  trackInventory: Boolean
}

input CreateManyProductVariantsInput {
  """Array of records to create"""
  productVariants: [CreateProductVariant!]!
}

input DeleteManyProductOptionsInput {
  """Filter to find records to delete"""
  filter: ProductOptionFilter!
}

input UpdateOneProductOptionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductOption!
}

input UpdateProductOption {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  code: String
}

input UpdateManyProductOptionsInput {
  """Filter used to find fields to update"""
  filter: ProductOptionFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductOption!
}

input CreateOneProductOptionInput {
  """The record to create"""
  productOption: CreateProductOption!
}

input CreateProductOption {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  code: String
}

input CreateManyProductOptionsInput {
  """Array of records to create"""
  productOptions: [CreateProductOption!]!
}

input DeleteManyProductOptionGroupsInput {
  """Filter to find records to delete"""
  filter: ProductOptionGroupFilter!
}

input UpdateOneProductOptionGroupInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductOptionGroup!
}

input UpdateProductOptionGroup {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  code: String
}

input UpdateManyProductOptionGroupsInput {
  """Filter used to find fields to update"""
  filter: ProductOptionGroupFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductOptionGroup!
}

input CreateOneProductOptionGroupInput {
  """The record to create"""
  productOptionGroup: CreateProductOptionGroup!
}

input CreateProductOptionGroup {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  code: String
}

input CreateManyProductOptionGroupsInput {
  """Array of records to create"""
  productOptionGroups: [CreateProductOptionGroup!]!
}

input DeleteManyProductVariantPricesInput {
  """Filter to find records to delete"""
  filter: ProductVariantPriceFilter!
}

input UpdateOneProductVariantPriceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductVariantPrice!
}

input UpdateProductVariantPrice {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  price: Float
  taxIncluded: Boolean
}

input UpdateManyProductVariantPricesInput {
  """Filter used to find fields to update"""
  filter: ProductVariantPriceFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductVariantPrice!
}

input CreateOneProductVariantPriceInput {
  """The record to create"""
  productVariantPrice: CreateProductVariantPrice!
}

input CreateProductVariantPrice {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  price: Float
  taxIncluded: Boolean
}

input CreateManyProductVariantPricesInput {
  """Array of records to create"""
  productVariantPrices: [CreateProductVariantPrice!]!
}

input DeleteManyProductAssetsInput {
  """Filter to find records to delete"""
  filter: ProductAssetFilter!
}

input UpdateOneProductAssetInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductAsset!
}

input UpdateProductAsset {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
}

input UpdateManyProductAssetsInput {
  """Filter used to find fields to update"""
  filter: ProductAssetFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductAsset!
}

input CreateOneProductAssetInput {
  """The record to create"""
  productAsset: CreateProductAsset!
}

input CreateProductAsset {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
}

input CreateManyProductAssetsInput {
  """Array of records to create"""
  productAssets: [CreateProductAsset!]!
}

enum VendorPlanPrice {
  FLAT
  INDIVIDUALCOLLECTION
  COMMISSION
}

input DeleteManyStockKeepingsInput {
  """Filter to find records to delete"""
  filter: StockKeepingFilter!
}

input UpdateOneStockKeepingInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateStockKeeping!
}

input UpdateStockKeeping {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
  available_quantity: Float
  threshold: Float
  multiple: Boolean
  backorder: Boolean
  stockstatus: Boolean
  sku: String
  type: String
}

input UpdateManyStockKeepingsInput {
  """Filter used to find fields to update"""
  filter: StockKeepingFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateStockKeeping!
}

enum StockKeepingType {
  GLOBAL
  VENDOR
}

input DeleteManySalesInput {
  """Filter to find records to delete"""
  filter: SaleFilter!
}

input UpdateOneSaleInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSale!
}

input UpdateSale {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

input UpdateManySalesInput {
  """Filter used to find fields to update"""
  filter: SaleFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSale!
}

input CreateOneSaleInput {
  """The record to create"""
  sale: CreateSale!
}

input CreateSale {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

input CreateManySalesInput {
  """Array of records to create"""
  sales: [CreateSale!]!
}

input DeleteManyStockMovementsInput {
  """Filter to find records to delete"""
  filter: StockMovementFilter!
}

input UpdateOneStockMovementInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateStockMovement!
}

input UpdateStockMovement {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

input UpdateManyStockMovementsInput {
  """Filter used to find fields to update"""
  filter: StockMovementFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateStockMovement!
}

input CreateOneStockMovementInput {
  """The record to create"""
  stockMovement: CreateStockMovement!
}

input CreateStockMovement {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

input CreateManyStockMovementsInput {
  """Array of records to create"""
  stockMovements: [CreateStockMovement!]!
}

input DeleteManyCancellationsInput {
  """Filter to find records to delete"""
  filter: CancellationFilter!
}

input UpdateOneCancellationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCancellation!
}

input UpdateCancellation {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

input UpdateManyCancellationsInput {
  """Filter used to find fields to update"""
  filter: CancellationFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCancellation!
}

input CreateOneCancellationInput {
  """The record to create"""
  cancellation: CreateCancellation!
}

input CreateCancellation {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

input CreateManyCancellationsInput {
  """Array of records to create"""
  cancellations: [CreateCancellation!]!
}

input DeleteManyOrdersInput {
  """Filter to find records to delete"""
  filter: OrderFilter!
}

input UpdateOneOrderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOrder!
}

input UpdateOrder {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  orderPlacedAt: DateTime
  totalPrice: Float
  address: String
}

input UpdateManyOrdersInput {
  """Filter used to find fields to update"""
  filter: OrderFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOrder!
}

input CreateOneOrderInput {
  """The record to create"""
  order: CreateOrder!
}

input CreateOrder {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  orderPlacedAt: DateTime
  totalPrice: Float
  address: String
}

input CreateManyOrdersInput {
  """Array of records to create"""
  orders: [CreateOrder!]!
}

input DeleteManyZipsInput {
  """Filter to find records to delete"""
  filter: ZipFilter!
}

input UpdateOneZipInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateZip!
}

input UpdateZip {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  slug: String
  code: Float
}

input UpdateManyZipsInput {
  """Filter used to find fields to update"""
  filter: ZipFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateZip!
}

input CreateOneZipInput {
  """The record to create"""
  zip: CreateZip!
}

input CreateZip {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  slug: String
  code: Float
}

input CreateManyZipsInput {
  """Array of records to create"""
  zips: [CreateZip!]!
}

input DeleteManyMenusInput {
  """Filter to find records to delete"""
  filter: MenuFilter!
}

input UpdateOneMenuInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateMenu!
}

input UpdateMenu {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  targetId: String
  target: String
}

input UpdateManyMenusInput {
  """Filter used to find fields to update"""
  filter: MenuFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateMenu!
}

input CreateOneMenuInput {
  """The record to create"""
  menu: CreateMenu!
}

input CreateMenu {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  targetId: String
  target: String
}

input CreateManyMenusInput {
  """Array of records to create"""
  menus: [CreateMenu!]!
}
