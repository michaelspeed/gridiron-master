# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Administrator {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  emailAddress: String!
  type: AdministratorEnum!
  user: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum AdministratorEnum {
  SUPERADMIN
  STAFF
}

type Asset {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  type: String!
  mimeType: String!
  width: Float!
  height: Float!
  fileSize: Float!
  source: String!
  preview: String!
  focalPoint: JSONObject!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Collection {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isRoot: Boolean!
  inMenu: Boolean!
  position: Float!
  isPrivate: Boolean!
  name: String!
  description: String!
  children: [Collection!]!
  products: [Product!]!
  seo: Seo!
  agreements: [BillingAgreement!]!
}

type Facet {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  isPrivate: Boolean!
  code: String!
}

type FacetValue {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: String!
  product: [Product!]!
  facet: Facet!
}

type Product {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  productName: String!
  slug: String!
  description: String!
  collection: Collection
  options: [ProductOptionGroup!]!
  featuredAsset: Asset!
  facets: [FacetValue!]!
  assets: [ProductAsset!]
  variants: [ProductVariant!]!
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  verified: Boolean!
  verificationToken: String
  passwordResetToken: String
  identifierChangeToken: String
  pendingIdentifier: String
  lastLogin: DateTime
  firstName: String
  lastName: String
  phoneNumber: String!
  administrator: Administrator!
  vendor: Vendor!
  delivery: Delivery!
  cart: Cart!
  view: [View!]!
  address: [Address!]!
}

type Vendor {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  vendorName: String!
  phoneNumber: String!
  email: String!
}

type TaxRate {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  value: Float!
  enabled: Boolean!
}

type Store {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  storeName: String!
  phoneNumber: String!
  officialemail: String!
  zipcode: String!
  streetAddress1: String!
  streetAddress2: String!
  GSTIN: String!
  singleStore: Boolean!
  rentalStore: Boolean!
  channelMarkets: Boolean!
  type: StoreTypeEnum!
}

enum StoreTypeEnum {
  DEFAULT
  VENDOR
}

type Seo {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  urlKey: String!
  metatitle: String!
  metakeywords: [String!]
  metadesc: String!
}

type ProductAsset {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  product: Product!
  asset: Asset!
}

type StockKeeping {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  quantity: Float!
  available_quantity: Float!
  threshold: Float!
  multiple: Boolean!
  backorder: Boolean!
  stockstatus: Boolean!
  sku: String!
  type: String!
  variant: ProductVariant!
}

type ProductVariant {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  dum_price: Float!
  enabled: Boolean!
  sku: String!
  name: String!
  product: Product!
  trackInventory: Boolean!
  asset: ProductVariantAsset!
  price: [ProductVariantPrice!]
  specs: ProductVariantSpecs!
  seo: Seo
  stock: [StockKeeping!]!
}

type ProductVariantAsset {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  asset: Asset!
  variant: ProductVariant!
}

type ProductVariantPrice {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  price: Float!
  taxIncluded: Boolean!
  tax: TaxRate!
  variant: ProductVariant!
  store: Store!
}

type ProductOption {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  code: String!
}

type ProductOptionGroup {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  code: String!
  product: Product!
  options: [ProductOption!]!
}

type BillingAgreement {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  value: Float!
  type: BillingAgreementEnum!
  state: BillingAgreementState!
  collection: Collection
  store: Store!
  request: [BillingAgreementRequest!]!
}

enum BillingAgreementEnum {
  PLANBASE
  COLLECTIONBASE
  COMISSIONBASE
}

enum BillingAgreementState {
  APPROVED
  PENDING
  REJECTED
}

type ProductVariantSpecs {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  specs: JSON!
  variant: ProductVariant!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Cart {
  id: ID!
}

type View {
  id: ID!
}

type BillingAgreementRequest {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  value: Float!
  state: BillingAgreementState!
}

type Page {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  targetId: String!
  single: JSON
  list: [String!]
  pageType: PageType!
  pageCategory: PageCategory!
}

enum PageType {
  LIST
  SINGLE
}

enum PageCategory {
  HOME
  CATEGORY
  SINGLEPROD
  PRODVARIANT
}

type Delivery {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
}

type Search {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  search: String!
  userId: String!
}

type Address {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  fullName: String!
  addressLine: String!
  city: String!
  state: String!
  landmark: String!
  postalCode: String!
  phoneNumber: String!
  alternatePhoneNumber: String!
  defaultShippingAddress: Boolean!
  defaultBillingAddress: Boolean!
  addressType: AddressType!
  user: User!
}

enum AddressType {
  HOME
  WORK
}

type AssetCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  name: Int
  type: Int
  mimeType: Int
  width: Int
  height: Int
  fileSize: Int
  source: Int
  preview: Int
}

type AssetSumAggregate {
  width: Float
  height: Float
  fileSize: Float
}

type AssetAvgAggregate {
  width: Float
  height: Float
  fileSize: Float
}

type AssetMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  type: String
  mimeType: String
  width: Float
  height: Float
  fileSize: Float
  source: String
  preview: String
}

type AssetMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  type: String
  mimeType: String
  width: Float
  height: Float
  fileSize: Float
  source: String
  preview: String
}

type AssetFeaturedsCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  productName: Int
  slug: Int
  description: Int
}

type AssetFeaturedsMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  productName: String
  slug: String
  description: String
}

type AssetFeaturedsMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  productName: String
  slug: String
  description: String
}

type AssetProductAssetsCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
}

type AssetProductAssetsMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
}

type AssetProductAssetsMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
}

type RoleCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  code: Int
  description: Int
}

type RoleMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
  description: String
}

type RoleMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
  description: String
}

type CollectionCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  isRoot: Int
  inMenu: Int
  position: Int
  isPrivate: Int
  name: Int
  description: Int
}

type CollectionSumAggregate {
  position: Float
}

type CollectionAvgAggregate {
  position: Float
}

type CollectionMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  position: Float
  name: String
  description: String
}

type CollectionMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  position: Float
  name: String
  description: String
}

type CollectionChildrenCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  isRoot: Int
  inMenu: Int
  position: Int
  isPrivate: Int
  name: Int
  description: Int
}

type CollectionChildrenSumAggregate {
  position: Float
}

type CollectionChildrenAvgAggregate {
  position: Float
}

type CollectionChildrenMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  position: Float
  name: String
  description: String
}

type CollectionChildrenMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  position: Float
  name: String
  description: String
}

type CollectionProductsCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  productName: Int
  slug: Int
  description: Int
}

type CollectionProductsMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  productName: String
  slug: String
  description: String
}

type CollectionProductsMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  productName: String
  slug: String
  description: String
}

type CollectionAgreementsCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  value: Int
}

type CollectionAgreementsSumAggregate {
  value: Float
}

type CollectionAgreementsAvgAggregate {
  value: Float
}

type CollectionAgreementsMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  value: Float
}

type CollectionAgreementsMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  value: Float
}

type ChannelCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  code: Int
  token: Int
  defaultLanguageCode: Int
  currencyCode: Int
  pricesIncludeTax: Int
}

type ChannelMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
  token: String
  defaultLanguageCode: String
  currencyCode: String
}

type ChannelMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
  token: String
  defaultLanguageCode: String
  currencyCode: String
}

type StoreCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  storeName: Int
  phoneNumber: Int
  officialemail: Int
  zipcode: Int
  streetAddress1: Int
  streetAddress2: Int
  GSTIN: Int
  singleStore: Int
  rentalStore: Int
  channelMarkets: Int
}

type StoreMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  storeName: String
  phoneNumber: String
  officialemail: String
  zipcode: String
  streetAddress1: String
  streetAddress2: String
  GSTIN: String
}

type StoreMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  storeName: String
  phoneNumber: String
  officialemail: String
  zipcode: String
  streetAddress1: String
  streetAddress2: String
  GSTIN: String
}

type StorePricesCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  amount: Int
  taxamount: Int
  finalamount: Int
  transactionID: Int
  remarks: Int
  type: Int
}

type StorePricesSumAggregate {
  amount: Float
  taxamount: Float
  finalamount: Float
}

type StorePricesAvgAggregate {
  amount: Float
  taxamount: Float
  finalamount: Float
}

type StorePricesMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  amount: Float
  taxamount: Float
  finalamount: Float
  transactionID: String
  remarks: String
  type: SettlementType
}

enum SettlementType {
  PROCESSING
  PROCESSED
}

type StorePricesMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  amount: Float
  taxamount: Float
  finalamount: Float
  transactionID: String
  remarks: String
  type: SettlementType
}

type StoreSettlementsCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  amount: Int
  taxamount: Int
  finalamount: Int
  transactionID: Int
  remarks: Int
  type: Int
}

type StoreSettlementsSumAggregate {
  amount: Float
  taxamount: Float
  finalamount: Float
}

type StoreSettlementsAvgAggregate {
  amount: Float
  taxamount: Float
  finalamount: Float
}

type StoreSettlementsMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  amount: Float
  taxamount: Float
  finalamount: Float
  transactionID: String
  remarks: String
  type: SettlementType
}

type StoreSettlementsMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  amount: Float
  taxamount: Float
  finalamount: Float
  transactionID: String
  remarks: String
  type: SettlementType
}

type StoreSkusCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  quantity: Int
  available_quantity: Int
  threshold: Int
  multiple: Int
  backorder: Int
  stockstatus: Int
  sku: Int
  type: Int
}

type StoreSkusSumAggregate {
  quantity: Float
  available_quantity: Float
  threshold: Float
}

type StoreSkusAvgAggregate {
  quantity: Float
  available_quantity: Float
  threshold: Float
}

type StoreSkusMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
  available_quantity: Float
  threshold: Float
  sku: String
  type: String
}

type StoreSkusMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
  available_quantity: Float
  threshold: Float
  sku: String
  type: String
}

type TaxCategoryCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  name: Int
}

type TaxCategoryMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

type TaxCategoryMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

type TaxCategoryRatesCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  name: Int
  value: Int
  enabled: Int
}

type TaxCategoryRatesSumAggregate {
  value: Float
}

type TaxCategoryRatesAvgAggregate {
  value: Float
}

type TaxCategoryRatesMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  value: Float
}

type TaxCategoryRatesMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  value: Float
}

type TaxRateCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  name: Int
  value: Int
  enabled: Int
}

type TaxRateSumAggregate {
  value: Float
}

type TaxRateAvgAggregate {
  value: Float
}

type TaxRateMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  value: Float
}

type TaxRateMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  value: Float
}

type TaxRateVariantsCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  price: Int
  taxIncluded: Int
}

type TaxRateVariantsSumAggregate {
  price: Float
}

type TaxRateVariantsAvgAggregate {
  price: Float
}

type TaxRateVariantsMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  price: Float
}

type TaxRateVariantsMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  price: Float
}

type UserCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  email: Int
  verified: Int
  verificationToken: Int
  passwordResetToken: Int
  identifierChangeToken: Int
  pendingIdentifier: Int
  lastLogin: Int
  firstName: Int
  lastName: Int
  phoneNumber: Int
}

type UserMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  email: String
  verificationToken: String
  passwordResetToken: String
  identifierChangeToken: String
  pendingIdentifier: String
  lastLogin: DateTime
  firstName: String
  lastName: String
  phoneNumber: String
}

type UserMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  email: String
  verificationToken: String
  passwordResetToken: String
  identifierChangeToken: String
  pendingIdentifier: String
  lastLogin: DateTime
  firstName: String
  lastName: String
  phoneNumber: String
}

type VendorCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  vendorName: Int
  phoneNumber: Int
  email: Int
}

type VendorMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  vendorName: String
  phoneNumber: String
  email: String
}

type VendorMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  vendorName: String
  phoneNumber: String
  email: String
}

type ZoneCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  name: Int
}

type ZoneMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

type ZoneMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

type ZoneMembersCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  code: Int
  name: Int
  enabled: Int
}

type ZoneMembersMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
  name: String
}

type ZoneMembersMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
  name: String
}

type ZoneStoresCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  storeName: Int
  phoneNumber: Int
  officialemail: Int
  zipcode: Int
  streetAddress1: Int
  streetAddress2: Int
  GSTIN: Int
  singleStore: Int
  rentalStore: Int
  channelMarkets: Int
}

type ZoneStoresMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  storeName: String
  phoneNumber: String
  officialemail: String
  zipcode: String
  streetAddress1: String
  streetAddress2: String
  GSTIN: String
}

type ZoneStoresMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  storeName: String
  phoneNumber: String
  officialemail: String
  zipcode: String
  streetAddress1: String
  streetAddress2: String
  GSTIN: String
}

type ZoneTaxratesCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  name: Int
  value: Int
  enabled: Int
}

type ZoneTaxratesSumAggregate {
  value: Float
}

type ZoneTaxratesAvgAggregate {
  value: Float
}

type ZoneTaxratesMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  value: Float
}

type ZoneTaxratesMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  value: Float
}

type CountryCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  code: Int
  name: Int
  enabled: Int
}

type CountryMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
  name: String
}

type CountryMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
  name: String
}

type CountryStoresCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  storeName: Int
  phoneNumber: Int
  officialemail: Int
  zipcode: Int
  streetAddress1: Int
  streetAddress2: Int
  GSTIN: Int
  singleStore: Int
  rentalStore: Int
  channelMarkets: Int
}

type CountryStoresMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  storeName: String
  phoneNumber: String
  officialemail: String
  zipcode: String
  streetAddress1: String
  streetAddress2: String
  GSTIN: String
}

type CountryStoresMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  storeName: String
  phoneNumber: String
  officialemail: String
  zipcode: String
  streetAddress1: String
  streetAddress2: String
  GSTIN: String
}

type CountryZonesCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  name: Int
}

type CountryZonesMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

type CountryZonesMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

type SeoCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
  urlKey: Int
  metatitle: Int
}

type SeoMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  urlKey: String
  metatitle: String
}

type SeoMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  urlKey: String
  metatitle: String
}

type FacetCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  name: Int
  isPrivate: Int
  code: Int
}

type FacetMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  code: String
}

type FacetMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  code: String
}

type FacetProductsCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  productName: Int
  slug: Int
  description: Int
}

type FacetProductsMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  productName: String
  slug: String
  description: String
}

type FacetProductsMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  productName: String
  slug: String
  description: String
}

type FacetValuesCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  code: Int
}

type FacetValuesMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
}

type FacetValuesMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
}

type FacetValueCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  code: Int
}

type FacetValueMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
}

type FacetValueMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
}

type FacetValueProductsCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  productName: Int
  slug: Int
  description: Int
}

type FacetValueProductsMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  productName: String
  slug: String
  description: String
}

type FacetValueProductsMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  productName: String
  slug: String
  description: String
}

type ProductCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  productName: Int
  slug: Int
  description: Int
}

type ProductMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  productName: String
  slug: String
  description: String
}

type ProductMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  productName: String
  slug: String
  description: String
}

type ProductOptionsCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  name: Int
  code: Int
}

type ProductOptionsMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  code: String
}

type ProductOptionsMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  code: String
}

type ProductFacetsCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  code: Int
}

type ProductFacetsMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
}

type ProductFacetsMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
}

type ProductVariantsCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
  dum_price: Int
  enabled: Int
  sku: Int
  name: Int
  trackInventory: Int
}

type ProductVariantsSumAggregate {
  dum_price: Float
}

type ProductVariantsAvgAggregate {
  dum_price: Float
}

type ProductVariantsMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  dum_price: Float
  sku: String
  name: String
}

type ProductVariantsMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  dum_price: Float
  sku: String
  name: String
}

type ProductAssetsCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
}

type ProductAssetsMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductAssetsMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductVariantCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
  dum_price: Int
  enabled: Int
  sku: Int
  name: Int
  trackInventory: Int
}

type ProductVariantSumAggregate {
  dum_price: Float
}

type ProductVariantAvgAggregate {
  dum_price: Float
}

type ProductVariantMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  dum_price: Float
  sku: String
  name: String
}

type ProductVariantMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  dum_price: Float
  sku: String
  name: String
}

type ProductVariantStocksCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  quantity: Int
  available_quantity: Int
  threshold: Int
  multiple: Int
  backorder: Int
  stockstatus: Int
  sku: Int
  type: Int
}

type ProductVariantStocksSumAggregate {
  quantity: Float
  available_quantity: Float
  threshold: Float
}

type ProductVariantStocksAvgAggregate {
  quantity: Float
  available_quantity: Float
  threshold: Float
}

type ProductVariantStocksMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
  available_quantity: Float
  threshold: Float
  sku: String
  type: String
}

type ProductVariantStocksMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
  available_quantity: Float
  threshold: Float
  sku: String
  type: String
}

type ProductVariantPricesCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  price: Int
  taxIncluded: Int
}

type ProductVariantPricesSumAggregate {
  price: Float
}

type ProductVariantPricesAvgAggregate {
  price: Float
}

type ProductVariantPricesMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  price: Float
}

type ProductVariantPricesMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  price: Float
}

type ProductOptionCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  name: Int
  code: Int
}

type ProductOptionMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  code: String
}

type ProductOptionMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  code: String
}

type ProductOptionVariantsCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
  dum_price: Int
  enabled: Int
  sku: Int
  name: Int
  trackInventory: Int
}

type ProductOptionVariantsSumAggregate {
  dum_price: Float
}

type ProductOptionVariantsAvgAggregate {
  dum_price: Float
}

type ProductOptionVariantsMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  dum_price: Float
  sku: String
  name: String
}

type ProductOptionVariantsMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  dum_price: Float
  sku: String
  name: String
}

type ProductOptionGroupCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  name: Int
  code: Int
}

type ProductOptionGroupMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  code: String
}

type ProductOptionGroupMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  code: String
}

type ProductOptionGroupOptionsCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  name: Int
  code: Int
}

type ProductOptionGroupOptionsMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  code: String
}

type ProductOptionGroupOptionsMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  code: String
}

type ProductVariantPriceCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  price: Int
  taxIncluded: Int
}

type ProductVariantPriceSumAggregate {
  price: Float
}

type ProductVariantPriceAvgAggregate {
  price: Float
}

type ProductVariantPriceMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  price: Float
}

type ProductVariantPriceMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  price: Float
}

type ProductVariantAssetCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
}

type ProductVariantAssetMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductVariantAssetMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductAssetCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
}

type ProductAssetMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductAssetMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
}

type VendorPlansCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  isActive: Int
  name: Int
  planValue: Int
}

type VendorPlansSumAggregate {
  planValue: Float
}

type VendorPlansAvgAggregate {
  planValue: Float
}

type VendorPlansMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  planValue: Float
}

type VendorPlansMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  planValue: Float
}

type VendorPlansLicencesCountAggregate {
  id: Int
  tenureStart: Int
  tenureEnd: Int
}

type VendorPlansLicencesMinAggregate {
  id: ID
  tenureStart: DateTime
  tenureEnd: DateTime
}

type VendorPlansLicencesMaxAggregate {
  id: ID
  tenureStart: DateTime
  tenureEnd: DateTime
}

type VendorLicenseCountAggregate {
  id: Int
  tenureStart: Int
  tenureEnd: Int
}

type VendorLicenseMinAggregate {
  id: ID
  tenureStart: DateTime
  tenureEnd: DateTime
}

type VendorLicenseMaxAggregate {
  id: ID
  tenureStart: DateTime
  tenureEnd: DateTime
}

type MenuResponseTypes {
  menu: String!
}

type StockKeepingCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  quantity: Int
  available_quantity: Int
  threshold: Int
  multiple: Int
  backorder: Int
  stockstatus: Int
  sku: Int
  type: Int
}

type StockKeepingSumAggregate {
  quantity: Float
  available_quantity: Float
  threshold: Float
}

type StockKeepingAvgAggregate {
  quantity: Float
  available_quantity: Float
  threshold: Float
}

type StockKeepingMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
  available_quantity: Float
  threshold: Float
  sku: String
  type: String
}

type StockKeepingMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
  available_quantity: Float
  threshold: Float
  sku: String
  type: String
}

type StockKeepingSalesCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  quantity: Int
}

type StockKeepingSalesSumAggregate {
  quantity: Float
}

type StockKeepingSalesAvgAggregate {
  quantity: Float
}

type StockKeepingSalesMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

type StockKeepingSalesMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

type StockKeepingCancelsCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  quantity: Int
}

type StockKeepingCancelsSumAggregate {
  quantity: Float
}

type StockKeepingCancelsAvgAggregate {
  quantity: Float
}

type StockKeepingCancelsMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

type StockKeepingCancelsMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

type StockKeepingMovementsCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  quantity: Int
}

type StockKeepingMovementsSumAggregate {
  quantity: Float
}

type StockKeepingMovementsAvgAggregate {
  quantity: Float
}

type StockKeepingMovementsMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

type StockKeepingMovementsMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

type SaleCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  quantity: Int
}

type SaleSumAggregate {
  quantity: Float
}

type SaleAvgAggregate {
  quantity: Float
}

type SaleMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

type SaleMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

type StockMovementCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  quantity: Int
}

type StockMovementSumAggregate {
  quantity: Float
}

type StockMovementAvgAggregate {
  quantity: Float
}

type StockMovementMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

type StockMovementMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

type CancellationCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  quantity: Int
}

type CancellationSumAggregate {
  quantity: Float
}

type CancellationAvgAggregate {
  quantity: Float
}

type CancellationMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

type CancellationMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Float
}

type OrderCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  orderPlacedAt: Int
  totalPrice: Int
  address: Int
}

type OrderSumAggregate {
  totalPrice: Float
}

type OrderAvgAggregate {
  totalPrice: Float
}

type OrderMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  orderPlacedAt: DateTime
  totalPrice: Float
  address: String
}

type OrderMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  orderPlacedAt: DateTime
  totalPrice: Float
  address: String
}

type ZipCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  name: Int
  slug: Int
  code: Int
}

type ZipSumAggregate {
  code: Float
}

type ZipAvgAggregate {
  code: Float
}

type ZipMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  slug: String
  code: Float
}

type ZipMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  slug: String
  code: Float
}

type MenuCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  title: Int
  targetId: Int
  target: Int
}

type MenuMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  targetId: String
  target: String
}

type MenuMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  targetId: String
  target: String
}

type MenuChildrenCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  title: Int
  targetId: Int
  target: Int
}

type MenuChildrenMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  targetId: String
  target: String
}

type MenuChildrenMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  targetId: String
  target: String
}

type PageCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  title: Int
  targetId: Int
  pageType: Int
  pageCategory: Int
}

type PageMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  targetId: String
  pageType: PageType
  pageCategory: PageCategory
}

type PageMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  targetId: String
  pageType: PageType
  pageCategory: PageCategory
}

type AddressCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  fullName: Int
  addressLine: Int
  city: Int
  state: Int
  landmark: Int
  postalCode: Int
  phoneNumber: Int
  alternatePhoneNumber: Int
  defaultShippingAddress: Int
  defaultBillingAddress: Int
  addressType: Int
}

type AddressMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  fullName: String
  addressLine: String
  city: String
  state: String
  landmark: String
  postalCode: String
  phoneNumber: String
  alternatePhoneNumber: String
  addressType: AddressType
}

type AddressMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  fullName: String
  addressLine: String
  city: String
  state: String
  landmark: String
  postalCode: String
  phoneNumber: String
  alternatePhoneNumber: String
  addressType: AddressType
}

type UserEdge {
  """The node containing the User"""
  node: User!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type AddressUsersCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  email: Int
  verified: Int
  verificationToken: Int
  passwordResetToken: Int
  identifierChangeToken: Int
  pendingIdentifier: Int
  lastLogin: Int
  firstName: Int
  lastName: Int
  phoneNumber: Int
}

type AddressUsersMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  email: String
  verificationToken: String
  passwordResetToken: String
  identifierChangeToken: String
  pendingIdentifier: String
  lastLogin: DateTime
  firstName: String
  lastName: String
  phoneNumber: String
}

type AddressUsersMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  email: String
  verificationToken: String
  passwordResetToken: String
  identifierChangeToken: String
  pendingIdentifier: String
  lastLogin: DateTime
  firstName: String
  lastName: String
  phoneNumber: String
}

type SettlementsCountAggregate {
  id: Int
  createdAt: Int
  updatedAt: Int
  amount: Int
  taxamount: Int
  finalamount: Int
  transactionID: Int
  remarks: Int
  type: Int
}

type SettlementsSumAggregate {
  amount: Float
  taxamount: Float
  finalamount: Float
}

type SettlementsAvgAggregate {
  amount: Float
  taxamount: Float
  finalamount: Float
}

type SettlementsMinAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  amount: Float
  taxamount: Float
  finalamount: Float
  transactionID: String
  remarks: String
  type: SettlementType
}

type SettlementsMaxAggregate {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  amount: Float
  taxamount: Float
  finalamount: Float
  transactionID: String
  remarks: String
  type: SettlementType
}

type CollectionSingleResponse {
  collection: Collection!
  facetValues: [FacetValue!]!
}

type UserResponse {
  user: User!
  token: String!
}

type Query {
  GetMenu: MenuResponseTypes!
  getAllCollection: [Collection!]!
  GetCollectionTree: [Collection!]!
  GetSingleCollection(id: ID!): CollectionSingleResponse!
  GetFacetsByCollection(id: ID!): [FacetValue!]!
  GetProductVariantForCollection(search: String, limit: Int, id: ID!): [ProductVariant!]!
  getHomePage: Page!
  getSingleProductVariant(id: ID!): ProductVariant!
  getProductVariantByProduct(id: ID!): [ProductVariant!]!
  getProductAsset(prodId: ID, variantId: ID): Asset!
  GetDefaultStore: Store!
  GetCurrentUser: User!
  GetUserAddress: [Address!]!
  GetAllSearch: [Search!]!
}

type Mutation {
  CreateUser(lname: String!, fname: String!, phone: String!, password: String!, email: String!): UserResponse!
  LoginUser(password: String!, email: String!): UserResponse!
  UpdateAccountInfo(lname: String!, fname: String!, phone: String!): User!
  CreateNewAddress(type: AddressType!, phoneNumber: String!, postalCode: String!, landmark: String!, state: String!, city: String!, addressLine: String!, fullName: String!): Address!
  UpdateNewAddress(id: ID!, type: AddressType!, phoneNumber: String!, postalCode: String!, landmark: String!, state: String!, city: String!, addressLine: String!, fullName: String!): Address!
  RegisterSearch(search: String!): Search!
}
